{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "nodeSettings": {
      "type": "object",
      "metadata": {
        "Description": "node settings object"
      }
    },
    "nodeOSSettings": {
      "type": "object",
      "metadata": {
        "Description": "node OS settings object"
      }
    },
    "vmssName": {
      "type": "string",
      "metadata": {
        "description": "String used as a base for naming resources. Must be 3-61 characters in length and globally unique across Azure. A hash is prepended to this string for some resources, and resource-specific information is appended."
      },
      "maxLength": 61
    },
    "instanceCount": {
      "type": "int",
      "metadata": {
        "description": "Number of VM instances (1000 or less)."
      },
      "maxValue": 1000
    },
    "newStorageAccountSuffix": {
      "type": "string"
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "password for the Virtual Machine."
      }
    },
    "postInstallCommand": {
      "type": "string",
            "metadata": {
        "description": "post install command to run as a post script install"
      }
    }
  },
  "variables": {   
    "virtualNetworkName": "[parameters('nodeSettings').vnetName]",
    "vmssname": "[parameters('vmssName')]",
    "jumpboxName": "[parameters('nodeSettings').MasterName]",
    "nodes": "[div(parameters('instanceCount'), 2)]",
    "instanceCount": "[add(parameters('instanceCount'), -1)]",
    "clientId":  "[parameters('nodeSettings').clientId]",
    "clientSecret": "[parameters('nodeSettings').clientSecret]",
    "tenantId": "[parameters('nodeSettings').tenantId]",
    "vmsscount": 2,
    "vmssNameVolume": "[concat(parameters('vmssName'), 'master')]",
    "vmssCountVolume": 1,
    "vnetID": "[resourceId(parameters('nodeSettings').vnetRG, 'Microsoft.Network/virtualNetworks', parameters('nodeSettings').vnetName)]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/', parameters('nodeSettings').subnetName)]",    
    "publicIPAddressName": "[concat(parameters('vmssName'), 'pip')]",
    "publicIPAddressName2": "[concat(parameters('vmssName'), 'pip2')]",
    "loadBalancerName0": "[concat(parameters('vmssName'), 'lb0')]",
    "loadBalancerName1": "[concat(parameters('vmssName'), 'lb1')]",
    "publicIPAddressID1": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('publicIPAddressName'),'0'))]",
    "publicIPAddressID2": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('publicIPAddressName'),'1'))]",
    "lbID1": "[resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerName0'))]",
    "lbID2": "[resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerName1'))]",
    "natPoolName": "[concat(parameters('vmssName'), 'natpool')]",
    "bePoolName": "[concat(parameters('vmssName'), 'bepool')]",
    "natPoolNameLast": "[concat(parameters('vmssName'), 'natpoollast')]",
    "bePoolNameLast": "[concat(parameters('vmssName'), 'bepoollast')]",
    "natStartPort": 50000,
    "natEndPort": 52000,
    "natBackendPort": 22,
    "storageDiskSize": "[variables('StandardStorageMap')[parameters('nodeSettings').storageDiskSize].size]",
    "numStorageDisks": "[parameters('nodeSettings').StorageDisksCount]",
    "numMetadataDisks": 0,
    "nicName": "[concat(parameters('vmssName'), 'nic')]",
     "namingInfix": "[toLower(take(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 9))]",
    "ipConfigName": "[concat(variables('namingInfix'), 'ipconfig')]",
    "frontEndIPConfigID1": "[concat(variables('lbID1'),'/frontendIPConfigurations/loadBalancerFrontEnd')]",
    "frontEndIPConfigID2": "[concat(variables('lbID2'),'/frontendIPConfigurations/loadBalancerFrontEnd')]",
    "networkApiVersion": "2016-06-01",
    "insightsApiVersion": "2015-04-01",
    "location": "[resourceGroup().location]",
    "rgname": "[resourceGroup().name]",
    "installLIS": "bash InstallLIS.sh",
    "ScriptsOptions": {
      "none": {
        "params": ""
      },
      "nfsonmaster": {
        "params": " -S nfsonmaster"
      },
      "beegfs": {
        "params": " -S beegfs"
      },
      "gluster": {
        "params": " -S gluster"
      },
      "ganglia": {
        "params": " -n ganglia"
      },
      "pbspro": {
        "params": "[concat(' -s pbspro -q ', parameters('vmssName'))]"
      },
      "master": {
        "params": "[concat(' -m ', parameters('nodeSettings').MasterName)]"
      },
      "postinstall": {
        "params": "[concat(' -c ', parameters('postInstallCommand'))]"
      }
    },
    "cnSetupScript": "cn-setup.sh",
    "templatelink": "[uri(deployment().properties.templateLink.uri, 'BeeGFS')]",
    "vmScripts": {
      "scriptsToDownload": [
        "[uri(deployment().properties.templateLink.uri, variables('cnSetupScript'))]",
        "[concat( variables('templatelink'), 'BeeGFS/install_beegfs.sh')]",       
        "[concat( variables('templatelink'), 'PBSPro/install_pbspro.sh')]",
        "[concat( variables('templatelink'), 'PBSPro/pbs_selfregister.sh')]",
        "[concat( variables('templatelink'), 'Ganglia/install_ganglia.sh')]"
      ],
      "commandToExecute": "[concat('bash ', variables('cnSetupScript'), variables('ScriptsOptions')['master'].params, variables('ScriptsOptions')[parameters('nodeSettings').scheduler].params, variables('ScriptsOptions')[parameters('nodeSettings').sharedStorage].params, variables('ScriptsOptions')[parameters('nodeSettings').monitoring].params, variables('ScriptsOptions')['postinstall'].params)]"
    },     
    "StandardStorageMap": {
      "S10": {
        "size": 128
      },
      "S20": {
        "size": 512
      },
      "S30": {
        "size": 1023
      }
    },
    "image": "[parameters('nodeOSSettings').imageReference]",
    "glusterNodeSettings": {
      "VMsku": "[parameters('nodeSettings').VMsku]",
      "storageDiskSize": "[variables('StandardStorageMap')[parameters('nodeSettings').storageDiskSize].size]",
      "numStorageDisks": "[parameters('nodeSettings').StorageDisksCount]",      
      "numMetadataDisks": 0
    },
    "computeNodeImages": {
      "CentOS_7.2": {
        "publisher": "OpenLogic",
        "offer": "CentOS",
        "sku": "7.2",
        "version": "latest"
      },
      "CentOS_7.3": {
        "publisher": "OpenLogic",
        "offer": "CentOS",
        "sku": "7.3",
        "version": "latest"
      }, "CentOS_6.9": {
        "publisher": "OpenLogic",
        "offer": "CentOS",
        "sku": "6.9",
        "version": "latest"
      },
      "RHEL_7.2": {
        "publisher": "RedHat",
        "offer": "RHEL",
        "sku": "7.2",
        "version": "latest"
      }
    },   
    "computeApiVersion": "2016-04-30-preview",
    "sshKeyPath": "[concat('/home/',parameters('nodeOSSettings').adminUserName,'/.ssh/authorized_keys')]",
    
    "storageDiskArray": [
      {
        "diskSizeGB": "[variables('glusterNodeSettings').storageDiskSize]",
        "lun": "0",
        "createOption": "Empty"
      },
      {
        "diskSizeGB": "[variables('glusterNodeSettings').storageDiskSize]",
        "lun": "1",
        "createOption": "Empty"
      },
      {
        "diskSizeGB": "[variables('glusterNodeSettings').storageDiskSize]",
        "lun": "2",
        "createOption": "Empty"
      },
      {
        "diskSizeGB": "[variables('glusterNodeSettings').storageDiskSize]",
        "lun": "3",
        "createOption": "Empty"
      },
      {
        "diskSizeGB": "[variables('glusterNodeSettings').storageDiskSize]",
        "lun": "4",
        "createOption": "Empty"
      },
      {
        "diskSizeGB": "[variables('glusterNodeSettings').storageDiskSize]",
        "lun": "5",
        "createOption": "Empty"
      },
      {
        "diskSizeGB": "[variables('glusterNodeSettings').storageDiskSize]",
        "lun": "6",
        "createOption": "Empty"
      },
      {
        "diskSizeGB": "[variables('glusterNodeSettings').storageDiskSize]",
        "lun": "7",
        "createOption": "Empty"
      },
      {
        "diskSizeGB": "[variables('glusterNodeSettings').storageDiskSize]",
        "lun": "8",
        "createOption": "Empty"
      },
      {
        "diskSizeGB": "[variables('glusterNodeSettings').storageDiskSize]",
        "lun": "9",
        "createOption": "Empty"
      },
      {
        "diskSizeGB": "[variables('glusterNodeSettings').storageDiskSize]",
        "lun": "10",
        "createOption": "Empty"
      }
    ]
  },
  "resources": [
  
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(variables('publicIPAddressName'),copyIndex())]",
      "location": "[variables('location')]",
      "apiVersion": "2016-06-01",
      "copy": {
        "name": "[variables('publicIPAddressName')]",
        "count": "[variables('vmsscount')]"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('vmssName'),copyIndex())]"
        }
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('loadBalancerName0')]",
      "location": "[variables('location')]",
      "apiVersion": "2016-06-01",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', concat(variables('publicIPAddressName'),'0'))]",
        "[concat('Microsoft.Network/publicIPAddresses/', concat(variables('publicIPAddressName'),'1'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontEnd",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIPAddressID1')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('bePoolName')]"
          }
        ],
        "inboundNatPools": [
          {
            "name": "[variables('natPoolName')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID1')]"
              },
              "protocol": "tcp",
              "frontendPortRangeStart": "[variables('natStartPort')]",
              "frontendPortRangeEnd": "[variables('natEndPort')]",
              "backendPort": "[variables('natBackendPort')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('loadBalancerName1')]",
      "location": "[variables('location')]",
      "apiVersion": "[variables('networkApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', concat(variables('publicIPAddressName'),'0'))]",
        "[concat('Microsoft.Network/publicIPAddresses/', concat(variables('publicIPAddressName'),'1'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontEnd",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIPAddressID2')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('bePoolNameLast')]"
          }
        ],
        "inboundNatPools": [
          {
            "name": "[variables('natPoolNameLast')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID2')]"
              },
              "protocol": "tcp",
              "frontendPortRangeStart": "[variables('natStartPort')]",
              "frontendPortRangeEnd": "[variables('natEndPort')]",
              "backendPort": "[variables('natBackendPort')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "name": "[parameters('vmssName')]",
      "location": "[variables('location')]",
      "apiVersion": "[variables('computeApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName0'))]"       
      ],
      "sku": {
        "name": "[variables('glusterNodeSettings').VMsku]",
        "tier": "Standard",
        "capacity": "[variables('instanceCount')]"
      },
      "properties": {
        "overprovision": "false",
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "storageProfile": {
            "osDisk": {
              "createOption": "FromImage",
              "managedDisk": {
                "storageAccountType": "Standard_LRS"
              }
            },
            "imageReference": "[parameters('nodeOSSettings').imageReference]",
            "dataDisks": "[concat(take(variables('storageDiskArray'), variables('numStorageDisks')))]"
          },
          "osProfile": {
            "computerNamePrefix": "[parameters('vmssName')]",
            "adminUsername": "[parameters('nodeOSSettings').adminUsername]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": "true",
              "ssh": {
                "publicKeys": [
                  {
                    "path": "[variables('sshKeyPath')]",
                    "keyData": "[parameters('nodeOSSettings').sshKeyData]"
                  }
                ]
              }
            }
          },
          "networkProfile": {
             "networkInterfaceConfigurations": [
              {
                "name": "[variables('nicName')]",
                "properties": {
                  "primary": true,
                  "ipConfigurations": [
                    {
                      "name": "[variables('ipConfigName')]",
                      "properties": {
                        "subnet": {
                          "id": "[variables('subnetRef')]"
                        },
                        "loadBalancerInboundNatPools": [
                          {
                           "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName0'), '/inboundNatPools/', variables('natPoolName'))]"
                          }
                        ],
                        "loadBalancerBackendAddressPools": [
                          {
                           "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName0'), '/backendAddressPools/', variables('bePoolName'))]"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]           
          },
          "extensionProfile": {
            "extensions": [
              {
                "name": "lapextension1",
                "properties": {
                  "publisher": "Microsoft.Azure.Extensions",
                  "type": "CustomScript",
                  "typeHandlerVersion": "2.0",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "fileUris": "[variables('vmScripts').scriptsToDownload]",
                    "commandToExecute": "[variables('vmScripts').commandToExecute]",
                     "timestamp": 12345
                  }
                }
              }
            ]
          }
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "name": "[variables('vmssNameVolume')]",
      "location": "[variables('location')]",
      "apiVersion": "[variables('computeApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName1'))]",        
        "[concat('Microsoft.Compute/virtualMachineScaleSets/', parameters('vmssName'))]"
      ],
      "sku": {
        "name": "[variables('glusterNodeSettings').VMsku]",
        "tier": "Standard",
        "capacity": "[variables('vmssCountVolume')]"
      },
      "properties": {
        "overprovision": "false",
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "storageProfile": {
            "osDisk": {
              "createOption": "FromImage",
              "managedDisk": {
                "storageAccountType": "Standard_LRS"
              }
            },
            "imageReference": "[parameters('nodeOSSettings').imageReference]",
            "dataDisks": "[concat(take(variables('storageDiskArray'),variables('glusterNodeSettings').numStorageDisks))]"
          },
          "osProfile": {
            "computerNamePrefix": "[variables('vmssNameVolume')]",
            "adminUsername": "[parameters('nodeOSSettings').adminUsername]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": "true",
              "ssh": {
                "publicKeys": [
                  {
                    "path": "[variables('sshKeyPath')]",
                    "keyData": "[parameters('nodeOSSettings').sshKeyData]"
                  }
                ]
              }
            }
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[variables('nicName')]",
                "properties": {
                  "primary": true,
                  "ipConfigurations": [
                    {
                      "name": "[variables('ipConfigName')]",
                      "properties": {
                        "subnet": {
                          "id": "[variables('subnetRef')]"
                        },
                        "loadBalancerInboundNatPools": [
                          {
                           "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName1'), '/inboundNatPools/', variables('natPoolNameLast'))]"
                          }
                        ],
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName1'), '/backendAddressPools/', variables('bePoolNameLast'))]"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]   
            
          },
          "extensionProfile": {
            "extensions": [
              {
                "name": "lapextension2",
                "properties": {
                  "publisher": "Microsoft.Azure.Extensions",
                  "type": "CustomScript",
                  "typeHandlerVersion": "2.0",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "fileUris": "[variables('vmScripts').scriptsToDownload]",                   
                    "commandToExecute": "[concat(variables('vmScripts').commandToExecute,';' ,'bash gluster-volume.sh ', variables('vmssname'),' ',variables('rgname'),' ',variables('clientId'),' ',variables('clientSecret'),' ',variables('tenantId'),' ',variables('nodes'))]"
                  }
                }
              }
            ]
          }
        }
      }
    }
  ]
}
